{"version":3,"sources":["app/modules/ECommerce/_redux/specifications/specificationsActions.js","app/modules/ECommerce/_redux/specifications/specificationsCrud.js","app/modules/ECommerce/_redux/remarks/remarksActions.js","app/modules/ECommerce/_redux/remarks/remarksCrud.js","app/modules/ECommerce/pages/manufacturers/manufactures-loading-dialog/ManufacturesLoadingDialog.js","app/modules/ECommerce/_redux/manufactures/manufacturesCrud.js","app/modules/ECommerce/_redux/manufactures/manufacturesActions.js","app/modules/ECommerce/pages/manufacturers/ManufacturesUIHelpers.js","app/modules/ECommerce/pages/manufacturers/ManufacturesUIContext.js","app/modules/ECommerce/pages/manufacturers/manufacture-delete-dialog/ManufactureDeleteDialog.js","app/modules/ECommerce/pages/manufacturers/manufactures-delete-dialog/ManufacturesDeleteDialog.js","app/modules/ECommerce/pages/manufacturers/manufactures-fetch-dialog/ManufacturesFetchDialog.js","app/modules/ECommerce/pages/manufacturers/manufactures-update-status-dialog/ManufacturesUpdateStatusDialog.js","app/modules/ECommerce/pages/manufacturers/manufactures-table/column-formatters/ActionsColumnFormatter.js","app/modules/ECommerce/pages/manufacturers/manufactures-table/ManufacturesTable.js","app/modules/ECommerce/pages/manufacturers/manufactures-grouping/ManufacturesGrouping.js","app/modules/ECommerce/pages/manufacturers/ManufactureCard.js","app/modules/ECommerce/pages/manufacturers/ManufacturesPage.js","app/modules/ECommerce/pages/manufacturers/manufacture-edit/ManufactureEditForm.js","app/modules/ECommerce/pages/manufacturers/manufacture-specifications/SpecificationsUIHelper.js","app/modules/ECommerce/pages/manufacturers/manufacture-specifications/SpecificationsUIContext.js","app/modules/ECommerce/pages/manufacturers/manufacture-specifications/specification-edit-dialog/SpecificationEditForm.js","app/modules/ECommerce/pages/manufacturers/manufacture-remarks/RemarksUIContext.js","app/modules/ECommerce/pages/manufacturers/manufacture-remarks/remark-edit-dialog/RemarkEditForm.js","app/modules/ECommerce/pages/manufacturers/manufacture-edit/ManufactureEdit.js","app/modules/ECommerce/pages/manufacturers/ManufacturesPages.js"],"names":["actions","specificationsSlice","fetchSpecifications","queryParams","productId","dispatch","startCall","callType","callTypes","list","axios","post","requestFromServer","then","response","data","totalCount","entities","specificationsFetched","catch","error","clientMessage","catchError","fetchSpecification","id","action","specificationId","get","specification","specificationFetched","specificationForEdit","undefined","deleteSpecification","delete","specificationDeleted","createSpecification","specificationForCreation","specificationCreated","updateSpecification","put","specificationUpdated","deleteSpecifications","ids","specificationsDeleted","remarksSlice","fetchRemarks","remarksFetched","fetchRemark","remarkId","remark","remarkFetched","remarkForEdit","deleteRemark","remarkDeleted","createRemark","remarkForCreation","remarkCreated","updateRemark","remarkUpdated","deleteRemarks","console","log","remarksDeleted","ManufacturesLoadingDialog","isLoading","useSelector","state","manufactures","listLoading","shallowEqual","useEffect","text","PRODUCTS_URL","API_URL","manufacturesSlice","fetchManufactures","filter","params","count","results","manufacturesFetched","fetchManufacture","manufactureId","manufacture","supplier","manufacture_manufacturer","manufacture_category","manufactureFetched","manufactureForEdit","deleteManufacture","manufactureDeleted","createManufacture","manufactureForCreation","manufactureCreated","updateManufacture","manufactureUpdated","updateManufacturesStatus","status","manufacturesStatusUpdated","deleteManufactures","manufacturesDeleted","ManufactureStatusCssClasses","defaultSorted","dataField","order","sizePerPageList","value","initialFilter","model","VINCode","sortOrder","sortField","pageNumber","pageSize","ManufacturesUIContext","createContext","useManufacturesUIContext","useContext","Consumer","ManufacturesUIProvider","manufacturesUIEvents","children","useState","setQueryParamsBase","setIds","setQueryParams","useCallback","nextQueryParams","prevQueryParams","isFunction","isEqual","newManufactureButtonClick","openEditManufacturePage","openDeleteManufactureDialog","openDeleteManufacturesDialog","openFetchManufacturesDialog","openUpdateManufacturesStatusDialog","Provider","ManufactureDeleteDialog","show","onHide","manufacturesUIContext","manufacturesUIProps","useMemo","useDispatch","actionsLoading","Modal","aria-labelledby","variant","Header","closeButton","Title","Body","Footer","type","onClick","className","ManufacturesDeleteDialog","length","selectedManufactures","_manufactures","forEach","find","el","push","ManufacturesFetchDialog","map","key","style","width","ManufacturesUpdateStatusDialog","setStatus","onChange","e","target","ActionsColumnFormatter","cellContent","row","rowIndex","OverlayTrigger","overlay","Tooltip","src","toAbsoluteUrl","ManufacturesTable","currentState","columns","sort","sortCaret","formatter","columnFormatters","formatExtraData","classes","headerClasses","minWidth","paginationOptions","custom","totalSize","uiHelpers","sizePerPage","page","pagination","paginationFactory","paginationProps","paginationTableProps","wrapperClasses","bootstrap4","bordered","remote","keyField","onTableChange","getHandlerTableChange","selectRow","getSelectRow","ManufacturesGrouping","ManufacturesCard","title","ManufacturesPage","history","ManufacturesUIEvents","ADMIN_ROUTE","path","match","ManufactureEditSchema","withAsyncPaginate","Creatable","Yup","shape","name","min","max","required","ManufactureEditForm","btnRef","saveManufacture","enableReinitialize","initialValues","validationSchema","onSubmit","values","handleSubmit","component","Input","placeholder","label","display","ref","SpecificationsUIContext","specId","RemarksUIContext","dueDate","nullable","initManufacture","ManufactureEdit","suhbeader","useSubheader","setTitle","_title","useRef","backToManufacturesList","current","click","ManufacturesPages","fallback"],"mappings":"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","file":"static/js/7.79592558.chunk.js","sourcesContent":["import * as requestFromServer from \"./specificationsCrud\";\r\nimport {specificationsSlice, callTypes} from \"./specificationsSlice\";\r\n\r\nconst {actions} = specificationsSlice;\r\n\r\nexport const fetchSpecifications = (queryParams, productId) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  if (!productId) {\r\n    return dispatch(\r\n      actions.specificationsFetched({ totalCount: 0, entities: null })\r\n    );\r\n  }\r\n\r\n  return requestFromServer\r\n    .findSpecifications(queryParams, productId)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.specificationsFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find specifications\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchSpecification = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(\r\n      actions.specificationFetched({ specificationForEdit: undefined })\r\n    );\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getSpecificationById(id)\r\n    .then(response => {\r\n      const specification = response.data;\r\n      dispatch(\r\n        actions.specificationFetched({ specificationForEdit: specification })\r\n      );\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteSpecification = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteSpecification(id)\r\n    .then(response => {\r\n      dispatch(actions.specificationDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createSpecification = specificationForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createSpecification(specificationForCreation)\r\n    .then(response => {\r\n      const { specification } = response.data;\r\n      dispatch(actions.specificationCreated({ specification }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateSpecification = specification => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateSpecification(specification)\r\n    .then(() => {\r\n      dispatch(actions.specificationUpdated({ specification }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteSpecifications = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteSpecifications(ids)\r\n    .then(() => {\r\n      dispatch(actions.specificationsDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete specifications\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const SPECIFICATIONS_URL = \"api/specifications\";\r\n\r\n// CREATE =>  POST: add a new specifications to the server\r\nexport function createSpecification(specification) {\r\n  return axios.post(SPECIFICATIONS_URL, { specification });\r\n}\r\n\r\n// READ\r\n// Server should return filtered specifications by productId\r\nexport function getAllProductSpecificationsByProductId(productId) {\r\n  return axios.get(`${SPECIFICATIONS_URL}?productId=${productId}`);\r\n}\r\n\r\nexport function getSpecificationById(specificationId) {\r\n  return axios.get(`${SPECIFICATIONS_URL}/${specificationId}`);\r\n}\r\n\r\n// Server should return sorted/filtered specifications and merge with items from state\r\n// TODO: Change your URL to REAL API, right now URL is 'api/specificationsfind/{productId}'. Should be 'api/specifications/find/{productId}'!!!\r\nexport function findSpecifications(queryParams, productId) {\r\n  return axios.post(`${SPECIFICATIONS_URL}find/${productId}`, { queryParams });\r\n}\r\n\r\n// UPDATE => PUT: update the specification\r\nexport function updateSpecification(specification) {\r\n  return axios.put(`${SPECIFICATIONS_URL}/${specification.id}`, {\r\n    specification\r\n  });\r\n}\r\n\r\n// DELETE => delete the specification\r\nexport function deleteSpecification(specificationId) {\r\n  return axios.delete(`${SPECIFICATIONS_URL}/${specificationId}`);\r\n}\r\n\r\n// DELETE specifications by ids\r\nexport function deleteSpecifications(ids) {\r\n  return axios.post(`${SPECIFICATIONS_URL}/deleteSpecifications`, { ids });\r\n}\r\n","import * as requestFromServer from \"./remarksCrud\";\r\nimport {remarksSlice, callTypes} from \"./remarksSlice\";\r\n\r\nconst {actions} = remarksSlice;\r\n\r\nexport const fetchRemarks = (queryParams, productId) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  if (!productId) {\r\n    return dispatch(actions.remarksFetched({ totalCount: 0, entities: null }));\r\n  }\r\n\r\n  return requestFromServer\r\n    .findRemarks(queryParams, productId)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.remarksFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find remarks\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchRemark = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(actions.remarkFetched({ remarkForEdit: undefined }));\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getRemarkById(id)\r\n    .then(response => {\r\n      const remark = response.data;\r\n      dispatch(actions.remarkFetched({ remarkForEdit: remark }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteRemark = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteRemark(id)\r\n    .then(response => {\r\n      dispatch(actions.remarkDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createRemark = remarkForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createRemark(remarkForCreation)\r\n    .then(response => {\r\n      const { remark } = response.data;\r\n      dispatch(actions.remarkCreated({ remark }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateRemark = remark => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateRemark(remark)\r\n    .then(() => {\r\n      dispatch(actions.remarkUpdated({ remark }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteRemarks = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteRemarks(ids)\r\n    .then(() => {\r\n      console.log(\"delete return\");\r\n      dispatch(actions.remarksDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete remarks\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const REMARKS_URL = \"api/remarks\";\r\n\r\n// CREATE =>  POST: add a new remark to the server\r\nexport function createRemark(remark) {\r\n  return axios.post(REMARKS_URL, { remark });\r\n}\r\n\r\n// READ\r\n// Server should return filtered remarks by productId\r\nexport function getAllProductRemarksByProductId(productId) {\r\n  return axios.get(`${REMARKS_URL}?productId=${productId}`);\r\n}\r\n\r\nexport function getRemarkById(remarkId) {\r\n  return axios.get(`${REMARKS_URL}/${remarkId}`);\r\n}\r\n\r\n// Server should return sorted/filtered remarks and merge with items from state\r\n// TODO: Change your URL to REAL API, right now URL is 'api/remarksfind/{productId}'. Should be 'api/remarks/find/{productId}'!!!\r\nexport function findRemarks(queryParams, productId) {\r\n  return axios.post(`${REMARKS_URL}find/${productId}`, { queryParams });\r\n}\r\n\r\n// UPDATE => PUT: update the remark\r\nexport function updateRemark(remark) {\r\n  return axios.put(`${REMARKS_URL}/${remark.id}`, { remark });\r\n}\r\n\r\n// DELETE => delete the remark\r\nexport function deleteRemark(remarkId) {\r\n  return axios.delete(`${REMARKS_URL}/${remarkId}`);\r\n}\r\n\r\n// DELETE Remarks by ids\r\nexport function deleteRemarks(ids) {\r\n  return axios.post(`${REMARKS_URL}/deleteRemarks`, { ids });\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport {shallowEqual, useSelector} from \"react-redux\";\r\nimport {LoadingDialog} from \"../../../../../../_metronic/_partials/controls\";\r\n\r\nexport function ManufacturesLoadingDialog() {\r\n  const { isLoading } = useSelector(\r\n    state => ({ isLoading: state.manufactures.listLoading }),\r\n    shallowEqual\r\n  );\r\n  useEffect(() => {}, [isLoading]);\r\n  return <LoadingDialog isLoading={isLoading} text=\"Loading ...\" />;\r\n}\r\n","import axios from \"axios\";\r\nimport { API_URL } from '../../../../pages/helper/api'\r\n\r\nexport const PRODUCTS_URL = API_URL + \"manufacturer\";\r\n\r\n// CREATE =>  POST: add a new manufacture to the server\r\nexport function createManufacture(manufacture) {\r\n  return axios.post(PRODUCTS_URL+'/', { ...manufacture });\r\n}\r\n\r\n// READ\r\nexport function getAllManufactures({filter}) {\r\n  return axios.get(PRODUCTS_URL,  {\r\n    params: filter\r\n  });\r\n}\r\n\r\nexport function getManufactureById(manufactureId) {\r\n  return axios.get(`${PRODUCTS_URL}/${manufactureId}`);\r\n}\r\n\r\n// Method from server should return QueryResultsModel(items: any[], totalsCount: number)\r\n// items => filtered/sorted result\r\nexport function findManufactures(queryParams) {\r\n  return axios.post(`${PRODUCTS_URL}/find`, { queryParams });\r\n}\r\n\r\n// UPDATE => PUT: update the procuct on the server\r\nexport function updateManufacture(manufacture) {\r\n  return axios.put(`${PRODUCTS_URL}/${manufacture.id}/`, { ...manufacture });\r\n}\r\n\r\n// UPDATE Status\r\nexport function updateStatusForManufactures(ids, status) {\r\n  return axios.post(`${PRODUCTS_URL}/updateStatusForManufactures`, {\r\n    ids,\r\n    status\r\n  });\r\n}\r\n\r\n// DELETE => delete the manufacture from the server\r\nexport function deleteManufacture(manufactureId) {\r\n  return axios.delete(`${PRODUCTS_URL}/${manufactureId}`);\r\n}\r\n\r\n// DELETE Manufactures by ids\r\nexport function deleteManufactures(ids) {\r\n  return axios.post(`${PRODUCTS_URL}/delete-all/`, { ids });\r\n}\r\n","import * as requestFromServer from \"./manufacturesCrud\";\r\nimport {manufacturesSlice, callTypes} from \"./manufacturesSlice\";\r\n\r\nconst {actions} = manufacturesSlice;\r\n\r\nexport const fetchManufactures = queryParams => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  return requestFromServer\r\n    .getAllManufactures(queryParams)\r\n    .then(response => {\r\n      const { count, results } = response.data;\r\n      dispatch(actions.manufacturesFetched({ count, results }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find manufactures\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchManufacture = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(actions.manufactureFetched({ manufactureForEdit: undefined }));\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getManufactureById(id)\r\n    .then(response => {\r\n      const manufacture = {\r\n        ...response.data, \r\n        supplier:response.data.supplier ? response.data.supplier.id : \"\",\r\n        manufacture_manufacturer:response.data.manufacture_manufacturer ? response.data.manufacture_manufacturer.id : \"\",\r\n        manufacture_category:response.data.manufacture_category ? response.data.manufacture_category.id : \"\",\r\n      };\r\n\r\n      dispatch(actions.manufactureFetched({ manufactureForEdit: manufacture }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find manufacture\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteManufacture = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteManufacture(id)\r\n    .then(response => {\r\n      dispatch(actions.manufactureDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete manufacture\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createManufacture = manufactureForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createManufacture(manufactureForCreation)\r\n    .then(response => {\r\n      const { data } = response;\r\n      dispatch(actions.manufactureCreated({ manufacture:data }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create manufacture\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateManufacture = manufacture => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  console.log('proudct', manufacture);\r\n  return requestFromServer\r\n    .updateManufacture(manufacture)\r\n    .then(() => {\r\n      dispatch(actions.manufactureUpdated({ manufacture }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update manufacture\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateManufacturesStatus = (ids, status) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateStatusForManufactures(ids, status)\r\n    .then(() => {\r\n      dispatch(actions.manufacturesStatusUpdated({ ids, status }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update manufactures status\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteManufactures = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteManufactures(ids)\r\n    .then(() => {\r\n      dispatch(actions.manufacturesDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete manufactures\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n","export const ManufactureStatusCssClasses = [\"danger\", \"success\", \"info\", \"\"];\r\nexport const ManufactureStatusTitles = [\"Inactive\", \"Active\"];\r\nexport const ManufactureConditionCssClasses = [\"success\", \"danger\", \"\"];\r\nexport const ManufactureConditionTitles = ['NE','NS', 'SV', 'AR', 'FN', 'US', 'RP'];\r\nexport const YES_NO_OPTIONS = ['YES', 'NO'];\r\nexport const UOM_CHOICES = ['CM', 'BOX', 'KG'];\r\nexport const defaultSorted = [{ dataField: \"id\", order: \"asc\" }];\r\nexport const sizePerPageList = [\r\n  { text: \"10\", value: 10 },\r\n  { text: \"25\", value: 25 },\r\n  { text: \"50\", value: 50 }\r\n];\r\nexport const initialFilter = {\r\n  filter: {\r\n    model: \"\",\r\n    manufacture: \"\",\r\n    VINCode: \"\"\r\n  },\r\n  sortOrder: \"asc\", // asc||desc\r\n  sortField: \"VINCode\",\r\n  pageNumber: 1,\r\n  pageSize: 10\r\n};\r\nexport const AVAILABLE_COLORS = [\r\n  \"Red\",\r\n  \"CadetBlue\",\r\n  \"Eagle\",\r\n  \"Gold\",\r\n  \"LightSlateGrey\",\r\n  \"RoyalBlue\",\r\n  \"Crimson\",\r\n  \"Blue\",\r\n  \"Sienna\",\r\n  \"Indigo\",\r\n  \"Green\",\r\n  \"Violet\",\r\n  \"GoldenRod\",\r\n  \"OrangeRed\",\r\n  \"Khaki\",\r\n  \"Teal\",\r\n  \"Purple\",\r\n  \"Orange\",\r\n  \"Pink\",\r\n  \"Black\",\r\n  \"DarkTurquoise\"\r\n];\r\n\r\nexport const AVAILABLE_MANUFACTURES = [\r\n  \"Pontiac\",\r\n  \"Kia\",\r\n  \"Lotus\",\r\n  \"Subaru\",\r\n  \"Jeep\",\r\n  \"Isuzu\",\r\n  \"Mitsubishi\",\r\n  \"Oldsmobile\",\r\n  \"Chevrolet\",\r\n  \"Chrysler\",\r\n  \"Audi\",\r\n  \"Suzuki\",\r\n  \"GMC\",\r\n  \"Cadillac\",\r\n  \"Infinity\",\r\n  \"Mercury\",\r\n  \"Dodge\",\r\n  \"Ram\",\r\n  \"Lexus\",\r\n  \"Lamborghini\",\r\n  \"Honda\",\r\n  \"Nissan\",\r\n  \"Ford\",\r\n  \"Hyundai\",\r\n  \"Saab\",\r\n  \"Toyota\"\r\n];\r\n","import React, { createContext, useContext, useState, useCallback } from \"react\";\r\nimport { isEqual, isFunction } from \"lodash\";\r\nimport { initialFilter } from \"./ManufacturesUIHelpers\";\r\n\r\nconst ManufacturesUIContext = createContext();\r\n\r\nexport function useManufacturesUIContext() {\r\n  return useContext(ManufacturesUIContext);\r\n}\r\n\r\nexport const ManufacturesUIConsumer = ManufacturesUIContext.Consumer;\r\n\r\nexport function ManufacturesUIProvider({ manufacturesUIEvents, children }) {\r\n  const [queryParams, setQueryParamsBase] = useState(initialFilter);\r\n  const [ids, setIds] = useState([]);\r\n  const setQueryParams = useCallback((nextQueryParams) => {\r\n    setQueryParamsBase((prevQueryParams) => {\r\n      if (isFunction(nextQueryParams)) {\r\n        nextQueryParams = nextQueryParams(prevQueryParams);\r\n      }\r\n\r\n      if (isEqual(prevQueryParams, nextQueryParams)) {\r\n        return prevQueryParams;\r\n      }\r\n\r\n      return nextQueryParams;\r\n    });\r\n  }, []);\r\n\r\n  const value = {\r\n    queryParams,\r\n    setQueryParamsBase,\r\n    ids,\r\n    setIds,\r\n    setQueryParams,\r\n    newManufactureButtonClick: manufacturesUIEvents.newManufactureButtonClick,\r\n    openEditManufacturePage: manufacturesUIEvents.openEditManufacturePage,\r\n    openDeleteManufactureDialog: manufacturesUIEvents.openDeleteManufactureDialog,\r\n    openDeleteManufacturesDialog: manufacturesUIEvents.openDeleteManufacturesDialog,\r\n    openFetchManufacturesDialog: manufacturesUIEvents.openFetchManufacturesDialog,\r\n    openUpdateManufacturesStatusDialog:\r\n      manufacturesUIEvents.openUpdateManufacturesStatusDialog,\r\n  };\r\n\r\n  return (\r\n    <ManufacturesUIContext.Provider value={value}>\r\n      {children}\r\n    </ManufacturesUIContext.Provider>\r\n  );\r\n}\r\n","/* eslint-disable no-restricted-imports */\r\nimport React, { useEffect, useMemo } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { ModalProgressBar } from \"../../../../../../_metronic/_partials/controls\";\r\nimport * as actions from \"../../../_redux/manufactures/manufacturesActions\";\r\nimport { useManufacturesUIContext } from \"../ManufacturesUIContext\";\r\n\r\nexport function ManufactureDeleteDialog({ id, show, onHide }) {\r\n  // Manufactures UI Context\r\n  const manufacturesUIContext = useManufacturesUIContext();\r\n  const manufacturesUIProps = useMemo(() => {\r\n    return {\r\n      setIds: manufacturesUIContext.setIds,\r\n      queryParams: manufacturesUIContext.queryParams,\r\n    };\r\n  }, [manufacturesUIContext]);\r\n\r\n  // manufactures Redux state\r\n  const dispatch = useDispatch();\r\n  const { isLoading } = useSelector(\r\n    (state) => ({ isLoading: state.manufactures.actionsLoading }),\r\n    shallowEqual\r\n  );\r\n\r\n  // if !id we should close modal\r\n  useEffect(() => {\r\n    if (!id) {\r\n      onHide();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [id]);\r\n\r\n  // looking for loading/dispatch\r\n  useEffect(() => {}, [isLoading, dispatch]);\r\n\r\n  const deleteManufacture = () => {\r\n    // server request for deleting Manufacture by id\r\n    dispatch(actions.deleteManufacture(id)).then(() => {\r\n      // refresh list after deletion\r\n      dispatch(actions.fetchManufactures(manufacturesUIProps.queryParams));\r\n      // clear selections list\r\n      manufacturesUIProps.setIds([]);\r\n      // closing delete modal\r\n      onHide();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={onHide}\r\n      aria-labelledby=\"example-modal-sizes-title-lg\"\r\n    >\r\n      {isLoading && <ModalProgressBar variant=\"query\" />}\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n          Manufacture Delete\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {!isLoading && (\r\n          <span>Are you sure to permanently delete this manufacture?</span>\r\n        )}\r\n        {isLoading && <span>Manufacture is deleting...</span>}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            onClick={onHide}\r\n            className=\"btn btn-light btn-elevate\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <> </>\r\n          <button\r\n            type=\"button\"\r\n            onClick={deleteManufacture}\r\n            className=\"btn btn-danger btn-elevate\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","/* eslint-disable no-restricted-imports */\r\nimport React, { useEffect, useMemo } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { ModalProgressBar } from \"../../../../../../_metronic/_partials/controls\";\r\nimport * as actions from \"../../../_redux/manufactures/manufacturesActions\";\r\nimport { useManufacturesUIContext } from \"../ManufacturesUIContext\";\r\n\r\nexport function ManufacturesDeleteDialog({ show, onHide }) {\r\n  // Manufactures UI Context\r\n  const manufacturesUIContext = useManufacturesUIContext();\r\n  const manufacturesUIProps = useMemo(() => {\r\n    return {\r\n      ids: manufacturesUIContext.ids,\r\n      setIds: manufacturesUIContext.setIds,\r\n      queryParams: manufacturesUIContext.queryParams,\r\n    };\r\n  }, [manufacturesUIContext]);\r\n\r\n  // Manufactures Redux state\r\n  const dispatch = useDispatch();\r\n  const { isLoading } = useSelector(\r\n    (state) => ({ isLoading: state.manufactures.actionsLoading }),\r\n    shallowEqual\r\n  );\r\n\r\n  // looking for loading/dispatch\r\n  useEffect(() => {}, [isLoading, dispatch]);\r\n\r\n  // if there weren't selected manufactures we should close modal\r\n  useEffect(() => {\r\n    if (!manufacturesUIProps.ids || manufacturesUIProps.ids.length === 0) {\r\n      onHide();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [manufacturesUIProps.ids]);\r\n\r\n  const deleteManufactures = () => {\r\n    // server request for deleting Manufacture by seleted ids\r\n    dispatch(actions.deleteManufactures(manufacturesUIProps.ids)).then(() => {\r\n      // refresh list after deletion\r\n      dispatch(actions.fetchManufactures(manufacturesUIProps.queryParams)).then(() => {\r\n        // clear selections list\r\n        manufacturesUIProps.setIds([]);\r\n        // closing delete modal\r\n        onHide();\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={onHide}\r\n      aria-labelledby=\"example-modal-sizes-title-lg\"\r\n    >\r\n      {isLoading && <ModalProgressBar />}\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n          Manufactures Delete\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {!isLoading && (\r\n          <span>Are you sure to permanently delete selected manufactures?</span>\r\n        )}\r\n        {isLoading && <span>Manufactures are deleting...</span>}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            onClick={onHide}\r\n            className=\"btn btn-light btn-elevate\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <> </>\r\n          <button\r\n            type=\"button\"\r\n            onClick={deleteManufactures}\r\n            className=\"btn btn-danger btn-elevate\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport { ManufactureStatusCssClasses } from \"../ManufacturesUIHelpers\";\r\nimport { useManufacturesUIContext } from \"../ManufacturesUIContext\";\r\n\r\nconst selectedManufactures = (entities, ids) => {\r\n  const _manufactures = [];\r\n  ids.forEach((id) => {\r\n    const manufacture = entities.find((el) => el.id === id);\r\n    if (manufacture) {\r\n      _manufactures.push(manufacture);\r\n    }\r\n  });\r\n  return _manufactures;\r\n};\r\n\r\nexport function ManufacturesFetchDialog({ show, onHide }) {\r\n  // Manufactures UI Context\r\n  const manufacturesUIContext = useManufacturesUIContext();\r\n  const manufacturesUIProps = useMemo(() => {\r\n    return {\r\n      ids: manufacturesUIContext.ids,\r\n      queryParams: manufacturesUIContext.queryParams,\r\n    };\r\n  }, [manufacturesUIContext]);\r\n\r\n  // Manufactures Redux state\r\n  const { manufactures } = useSelector(\r\n    (state) => ({\r\n      manufactures: selectedManufactures(state.manufactures.entities, manufacturesUIProps.ids),\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  // if there weren't selected ids we should close modal\r\n  useEffect(() => {\r\n    if (!manufacturesUIProps.ids || manufacturesUIProps.ids.length === 0) {\r\n      onHide();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [manufacturesUIProps.ids]);\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={onHide}\r\n      aria-labelledby=\"example-modal-sizes-title-lg\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n          Fetch selected elements\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"list-timeline list-timeline-skin-light padding-30\">\r\n          <div className=\"list-timeline-items\">\r\n            {manufactures.map((manufacture) => (\r\n              <div className=\"list-timeline-item mb-3\" key={manufacture.id}>\r\n                <span className=\"list-timeline-text\">\r\n                  <span\r\n                    className={`label label-lg label-light-${\r\n                      ManufactureStatusCssClasses[manufacture.status]\r\n                    } label-inline`}\r\n                    style={{ width: \"60px\" }}\r\n                  >\r\n                    ID: {manufacture.id}\r\n                  </span>{\" \"}\r\n                  <span className=\"ml-5\">\r\n                    {manufacture.manufacture}, {manufacture.model}\r\n                  </span>\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            onClick={onHide}\r\n            className=\"btn btn-light btn-elevate\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <> </>\r\n          <button\r\n            type=\"button\"\r\n            onClick={onHide}\r\n            className=\"btn btn-primary btn-elevate\"\r\n          >\r\n            Ok\r\n          </button>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { ManufactureStatusCssClasses } from \"../ManufacturesUIHelpers\";\r\nimport * as actions from \"../../../_redux/manufactures/manufacturesActions\";\r\nimport { useManufacturesUIContext } from \"../ManufacturesUIContext\";\r\n\r\nconst selectedManufactures = (entities, ids) => {\r\n  const _manufactures = [];\r\n  ids.forEach((id) => {\r\n    const manufacture = entities.find((el) => el.id === id);\r\n    if (manufacture) {\r\n      _manufactures.push(manufacture);\r\n    }\r\n  });\r\n  return _manufactures;\r\n};\r\n\r\nexport function ManufacturesUpdateStatusDialog({ show, onHide }) {\r\n  // Manufactures UI Context\r\n  const manufacturesUIContext = useManufacturesUIContext();\r\n  const manufacturesUIProps = useMemo(() => {\r\n    return {\r\n      ids: manufacturesUIContext.ids,\r\n      setIds: manufacturesUIContext.setIds,\r\n      queryParams: manufacturesUIContext.queryParams,\r\n    };\r\n  }, [manufacturesUIContext]);\r\n\r\n  // Manufactures Redux state\r\n  const { manufactures, isLoading } = useSelector(\r\n    (state) => ({\r\n      manufactures: selectedManufactures(state.manufactures.entities, manufacturesUIProps.ids),\r\n      isLoading: state.manufactures.actionsLoading,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  // if there weren't selected Manufactures we should close modal\r\n  useEffect(() => {\r\n    if (manufacturesUIProps.ids || manufacturesUIProps.ids.length === 0) {\r\n      onHide();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [manufacturesUIProps.ids]);\r\n\r\n  const [status, setStatus] = useState(0);\r\n\r\n  const dispatch = useDispatch();\r\n  const updateStatus = () => {\r\n    // server request for updateing manufacture by ids\r\n    dispatch(actions.updateManufacturesStatus(manufacturesUIProps.ids, status)).then(\r\n      () => {\r\n        // refresh list after deletion\r\n        dispatch(actions.fetchManufactures(manufacturesUIProps.queryParams)).then(\r\n          () => {\r\n            // clear selections list\r\n            manufacturesUIProps.setIds([]);\r\n            // closing delete modal\r\n            onHide();\r\n          }\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={onHide}\r\n      aria-labelledby=\"example-modal-sizes-title-lg\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n          Status has been updated for selected manufactures\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"overlay overlay-block cursor-default\">\r\n        {isLoading && (\r\n          <div className=\"overlay-layer bg-transparent\">\r\n            <div className=\"spinner spinner-lg spinner-warning\" />\r\n          </div>\r\n        )}\r\n        <div className=\"list-timeline list-timeline-skin-light padding-30\">\r\n          <div className=\"list-timeline-items\">\r\n            {manufactures.map((manufacture) => (\r\n              <div className=\"list-timeline-item mb-3\" key={manufacture.id}>\r\n                <span className=\"list-timeline-text\">\r\n                  <span\r\n                    className={`label label-lg label-light-${\r\n                      ManufactureStatusCssClasses[manufacture.status]\r\n                    } label-inline`}\r\n                    style={{ width: \"60px\" }}\r\n                  >\r\n                    ID: {manufacture.id}\r\n                  </span>{\" \"}\r\n                  <span className=\"ml-5\">\r\n                    {manufacture.manufacture}, {manufacture.model}\r\n                  </span>\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"form\">\r\n        <div className=\"form-group\">\r\n          <select\r\n            className={`form-control ${ManufactureStatusCssClasses[status]}`}\r\n            value={status}\r\n            onChange={(e) => setStatus(+e.target.value)}\r\n          >\r\n            <option value=\"0\">Selling</option>\r\n            <option value=\"1\">Sold</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={onHide}\r\n            className=\"btn btn-light btn-elevate\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <> </>\r\n          <button\r\n            type=\"button\"\r\n            onClick={updateStatus}\r\n            className=\"btn btn-primary btn-elevate\"\r\n          >\r\n            Update Status\r\n          </button>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","/* eslint-disable no-script-url,jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport SVG from \"react-inlinesvg\";\r\nimport { toAbsoluteUrl } from \"../../../../../../../_metronic/_helpers\";\r\n\r\nexport const ActionsColumnFormatter = (\r\n  cellContent,\r\n  row,\r\n  rowIndex,\r\n  { openEditManufacturePage, openDeleteManufactureDialog }\r\n) => (\r\n  <>\r\n    <OverlayTrigger\r\n      overlay={<Tooltip id=\"manufactures-edit-tooltip\">Edit manufacture</Tooltip>}\r\n    >\r\n      <a\r\n        className=\"btn btn-icon btn-light btn-hover-info btn-sm mx-3\"\r\n        onClick={() => openEditManufacturePage(row.id)}\r\n      >\r\n        <span className=\"svg-icon svg-icon-md svg-icon-info\">\r\n          <SVG\r\n            src={toAbsoluteUrl(\"/static/media/svg/icons/Communication/Write.svg\")}\r\n          />\r\n        </span>\r\n      </a>\r\n    </OverlayTrigger>\r\n\r\n    <> </>\r\n    <OverlayTrigger\r\n      overlay={<Tooltip id=\"manufactures-delete-tooltip\">Delete manufacture</Tooltip>}\r\n    >\r\n      <a\r\n        className=\"btn btn-icon btn-light btn-hover-danger btn-sm\"\r\n        onClick={() => openDeleteManufactureDialog(row.id)}\r\n      >\r\n        <span className=\"svg-icon svg-icon-md svg-icon-danger\">\r\n          <SVG src={toAbsoluteUrl(\"/static/media/svg/icons/General/Trash.svg\")} />\r\n        </span>\r\n      </a>\r\n    </OverlayTrigger>\r\n  </>\r\n);\r\n","// React bootstrap table next =>\r\n// DOCS: https://react-bootstrap-table.github.io/react-bootstrap-table2/docs/\r\n// STORYBOOK: https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html\r\nimport React, { useEffect, useMemo } from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory, {\r\n  PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../../_redux/manufactures/manufacturesActions\";\r\nimport * as uiHelpers from \"../ManufacturesUIHelpers\";\r\nimport {\r\n  getSelectRow,\r\n  getHandlerTableChange,\r\n  NoRecordsFoundMessage,\r\n  PleaseWaitMessage,\r\n  sortCaret,\r\n} from \"../../../../../../_metronic/_helpers\";\r\nimport * as columnFormatters from \"./column-formatters\";\r\nimport { Pagination } from \"../../../../../../_metronic/_partials/controls\";\r\nimport { useManufacturesUIContext } from \"../ManufacturesUIContext\";\r\n\r\nexport function ManufacturesTable() {\r\n  // Manufactures UI Context\r\n  const manufacturesUIContext = useManufacturesUIContext();\r\n  const manufacturesUIProps = useMemo(() => {\r\n    return {\r\n      ids: manufacturesUIContext.ids,\r\n      setIds: manufacturesUIContext.setIds,\r\n      queryParams: manufacturesUIContext.queryParams,\r\n      setQueryParams: manufacturesUIContext.setQueryParams,\r\n      openEditManufacturePage: manufacturesUIContext.openEditManufacturePage,\r\n      openDeleteManufactureDialog: manufacturesUIContext.openDeleteManufactureDialog,\r\n    };\r\n  }, [manufacturesUIContext]);\r\n\r\n  // Getting curret state of manufactures list from store (Redux)\r\n  const { currentState } = useSelector(\r\n    (state) => ({ currentState: state.manufactures }),\r\n    shallowEqual\r\n  );\r\n  const { totalCount, entities, listLoading } = currentState;\r\n  // Manufactures Redux state\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    // clear selections list\r\n    manufacturesUIProps.setIds([]);\r\n    // server call by queryParams\r\n    dispatch(actions.fetchManufactures(manufacturesUIProps.queryParams));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [manufacturesUIProps.queryParams, dispatch]);\r\n  // Table columns\r\n  const columns = [\r\n   \r\n    {\r\n      dataField: \"name\",\r\n      text: \"Name\",\r\n      sort: true,\r\n      sortCaret: sortCaret,\r\n    },\r\n    {\r\n      dataField: \"action\",\r\n      text: \"Actions\",\r\n      formatter: columnFormatters.ActionsColumnFormatter,\r\n      formatExtraData: {\r\n        openEditManufacturePage: manufacturesUIProps.openEditManufacturePage,\r\n        openDeleteManufactureDialog: manufacturesUIProps.openDeleteManufactureDialog,\r\n      },\r\n      classes: \"text-right pr-0\",\r\n      headerClasses: \"text-right pr-3\",\r\n      style: {\r\n        minWidth: \"100px\",\r\n      },\r\n    },\r\n  ];\r\n  // Table pagination properties\r\n  const paginationOptions = {\r\n    custom: true,\r\n    totalSize: totalCount,\r\n    sizePerPageList: uiHelpers.sizePerPageList,\r\n    sizePerPage: manufacturesUIProps.queryParams.pageSize,\r\n    page: manufacturesUIProps.queryParams.pageNumber,\r\n  };\r\n  let data = [];\r\n  return (\r\n    <>\r\n      <PaginationProvider pagination={paginationFactory(paginationOptions)}>\r\n        {({ paginationProps, paginationTableProps }) => {\r\n          return (\r\n            <Pagination\r\n              isLoading={listLoading}\r\n              paginationProps={paginationProps}\r\n            >\r\n              <BootstrapTable\r\n                wrapperClasses=\"table-responsive\"\r\n                classes=\"table table-head-custom table-vertical-center overflow-hidden\"\r\n                bootstrap4\r\n                bordered={false}\r\n                remote\r\n                keyField=\"id\"\r\n                data= {entities}\r\n                columns={columns}\r\n                defaultSorted={uiHelpers.defaultSorted}\r\n                onTableChange={getHandlerTableChange(\r\n                  manufacturesUIProps.setQueryParams\r\n                )}\r\n                selectRow={getSelectRow({\r\n                  entities,\r\n                  ids: manufacturesUIProps.ids,\r\n                  setIds: manufacturesUIProps.setIds,\r\n                })}\r\n                {...paginationTableProps}\r\n              >\r\n                <PleaseWaitMessage entities={entities} />\r\n                <NoRecordsFoundMessage entities={entities} />\r\n              </BootstrapTable>\r\n            </Pagination>\r\n          );\r\n        }}\r\n      </PaginationProvider>\r\n    </>\r\n  );\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { useManufacturesUIContext } from \"../ManufacturesUIContext\";\r\n\r\nexport function ManufacturesGrouping() {\r\n  // Manufactures UI Context\r\n  const manufacturesUIContext = useManufacturesUIContext();\r\n  const manufacturesUIProps = useMemo(() => {\r\n    return {\r\n      ids: manufacturesUIContext.ids,\r\n      setIds: manufacturesUIContext.setIds,\r\n      openDeleteManufacturesDialog: manufacturesUIContext.openDeleteManufacturesDialog,\r\n      openFetchManufacturesDialog: manufacturesUIContext.openFetchManufacturesDialog,\r\n      openUpdateManufacturesStatusDialog:\r\n        manufacturesUIContext.openUpdateManufacturesStatusDialog,\r\n    };\r\n  }, [manufacturesUIContext]);\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <div className=\"row align-items-center form-group-actions margin-top-20 margin-bottom-20\">\r\n        <div className=\"col-xl-12\">\r\n          <div className=\"form-group form-group-inline\">\r\n            <div className=\"form-label form-label-no-wrap\">\r\n              <label className=\"-font-bold font-danger-\">\r\n                <span>\r\n                  Selected records count: <b>{manufacturesUIProps.ids.length}</b>\r\n                </span>\r\n              </label>\r\n            </div>\r\n            <div>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger font-weight-bolder font-size-sm\"\r\n                onClick={manufacturesUIProps.openDeleteManufacturesDialog}\r\n              >\r\n                <i className=\"fa fa-trash\"></i> Delete All\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useMemo} from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardHeaderToolbar,\r\n} from \"../../../../../_metronic/_partials/controls\";\r\nimport { ManufacturesFilter } from \"./manufactures-filter/ManufacturesFilter\";\r\nimport { ManufacturesTable } from \"./manufactures-table/ManufacturesTable\";\r\nimport { ManufacturesGrouping } from \"./manufactures-grouping/ManufacturesGrouping\";\r\nimport { useManufacturesUIContext } from \"./ManufacturesUIContext\";\r\n\r\nexport function ManufacturesCard() {\r\n  const manufacturesUIContext = useManufacturesUIContext();\r\n  const manufacturesUIProps = useMemo(() => {\r\n    return {\r\n      ids: manufacturesUIContext.ids,\r\n      queryParams: manufacturesUIContext.queryParams,\r\n      setQueryParams: manufacturesUIContext.setQueryParams,\r\n      newManufactureButtonClick: manufacturesUIContext.newManufactureButtonClick,\r\n      openDeleteManufacturesDialog: manufacturesUIContext.openDeleteManufacturesDialog,\r\n      openEditManufacturePage: manufacturesUIContext.openEditManufacturePage,\r\n      openUpdateManufacturesStatusDialog:\r\n        manufacturesUIContext.openUpdateManufacturesStatusDialog,\r\n      openFetchManufacturesDialog: manufacturesUIContext.openFetchManufacturesDialog,\r\n    };\r\n  }, [manufacturesUIContext]);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"Manufactures\">\r\n        <CardHeaderToolbar>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-info\"\r\n            onClick={manufacturesUIProps.newManufactureButtonClick}\r\n          >\r\n            Add Manufacture\r\n          </button>\r\n        </CardHeaderToolbar>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {manufacturesUIProps.ids.length > 0 && (\r\n          <>\r\n            <ManufacturesGrouping />\r\n          </>\r\n        )}\r\n        <ManufacturesTable />\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { ManufacturesLoadingDialog } from \"./manufactures-loading-dialog/ManufacturesLoadingDialog\";\r\nimport { ManufactureDeleteDialog } from \"./manufacture-delete-dialog/ManufactureDeleteDialog\";\r\nimport { ManufacturesDeleteDialog } from \"./manufactures-delete-dialog/ManufacturesDeleteDialog\";\r\nimport { ManufacturesFetchDialog } from \"./manufactures-fetch-dialog/ManufacturesFetchDialog\";\r\nimport { ManufacturesUpdateStatusDialog } from \"./manufactures-update-status-dialog/ManufacturesUpdateStatusDialog\";\r\nimport  {ManufacturesCard}  from \"./ManufactureCard\";\r\nimport { ManufacturesUIProvider } from \"./ManufacturesUIContext\";\r\nimport {ADMIN_ROUTE} from '../../../../pages/helper/api'\r\n\r\nexport function ManufacturesPage({ history }) {\r\n  const ManufacturesUIEvents = {\r\n    newManufactureButtonClick: () => {\r\n      history.push(`/${ADMIN_ROUTE}/manufactures/new`);\r\n    },\r\n    openEditManufacturePage: (id) => {\r\n      history.push(`/${ADMIN_ROUTE}/manufactures/${id}/edit`);\r\n    },\r\n    openDeleteManufactureDialog: (id) => {\r\n      history.push(`/${ADMIN_ROUTE}/manufactures/${id}/delete`);\r\n    },\r\n    openDeleteManufacturesDialog: () => {\r\n      history.push(`/${ADMIN_ROUTE}/manufactures/deleteManufactures`);\r\n    },\r\n    openFetchManufacturesDialog: () => {\r\n      history.push(`/${ADMIN_ROUTE}/manufactures/fetch`);\r\n    },\r\n    openUpdateManufacturesStatusDialog: () => {\r\n      history.push(\"/\"+ADMIN_ROUTE+\"/manufactures/updateStatus\");\r\n    },\r\n  };\r\n\r\n  return (\r\n    <ManufacturesUIProvider manufacturesUIEvents={ManufacturesUIEvents}>\r\n      <ManufacturesLoadingDialog />\r\n      <Route path={\"/\"+ADMIN_ROUTE+\"/manufactures/deleteManufactures\"}>\r\n        {({ history, match }) => (\r\n          <ManufacturesDeleteDialog\r\n            show={match != null}\r\n            onHide={() => {\r\n              history.push(\"/\"+ADMIN_ROUTE+\"/manufactures\");\r\n            }}\r\n          />\r\n        )}\r\n      </Route>\r\n      <Route path={\"/\"+ADMIN_ROUTE+\"/manufactures/:id/delete\"}>\r\n        {({ history, match }) => (\r\n          <ManufactureDeleteDialog\r\n            show={match != null}\r\n            id={match && match.params.id}\r\n            onHide={() => {\r\n              history.push(\"/\"+ADMIN_ROUTE+\"/manufactures\");\r\n            }}\r\n          />\r\n        )}\r\n      </Route>\r\n      <Route path={\"/\"+ADMIN_ROUTE+\"/manufactures/fetch\"}>\r\n        {({ history, match }) => (\r\n          <ManufacturesFetchDialog\r\n            show={match != null}\r\n            onHide={() => {\r\n              history.push(\"/\"+ADMIN_ROUTE+\"/manufactures\");\r\n            }}\r\n          />\r\n        )}\r\n      </Route>\r\n      <Route path={\"/\"+ADMIN_ROUTE+\"/manufactures/updateStatus\"}>\r\n        {({ history, match }) => (\r\n          <ManufacturesUpdateStatusDialog\r\n            show={match != null}\r\n            onHide={() => {\r\n              history.push(\"/\"+ADMIN_ROUTE+\"/manufactures\");\r\n            }}\r\n          />\r\n        )}\r\n      </Route>\r\n      <ManufacturesCard />\r\n    </ManufacturesUIProvider>\r\n  );\r\n}\r\n","// Form is based on Formik\r\n// Data validation is based on Yup\r\n// Please, be familiar with article first:\r\n// https://hackernoon.com/react-form-validation-with-formik-and-yup-8b76bda62e10\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Input, Select as MSelect } from \"../../../../../../_metronic/_partials/controls\";\r\nimport Creatable from \"react-select/creatable\";\r\nimport { withAsyncPaginate, AsyncPaginate } from \"react-select-async-paginate\";\r\n\r\nimport Select from 'react-select';\r\nimport {\r\n  AVAILABLE_COLORS,\r\n  AVAILABLE_MANUFACTURES,\r\n  ManufactureStatusTitles,\r\n  YES_NO_OPTIONS,\r\n  UOM_CHOICES,\r\n  ManufactureConditionTitles,\r\n} from \"../ManufacturesUIHelpers\";\r\nimport { list, loadOptions, DROPDOWN_WAIT, post } from \"../../../../../pages/helper/api\";\r\n\r\nconst CreatableAsyncPaginate = withAsyncPaginate(Creatable);\r\n// Validation schema\r\nconst ManufactureEditSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, \"Minimum 2 symbols\")\r\n    .max(50, \"Maximum 50 symbols\")\r\n    .required(\"Name is required\"),\r\n  // alt_part_number: Yup.string()\r\n  //   .min(2, \"Minimum 2 symbols\")\r\n  //   .max(50, \"Maximum 50 symbols\")\r\n  //   .required(\"Alt part number is required\"),\r\n  // manufacture_category: Yup.string(),\r\n  // supplier: Yup.string(),\r\n  // manufacture_manufacturer: Yup.string(),\r\n  // unit_price: Yup.number(),\r\n  // condition: Yup.string()\r\n  //   .min(2, \"Minimum 2 symbols\")\r\n  //   .max(50, \"Maximum 2 symbols\"),\r\n  // quantity: Yup.number()\r\n  //   .min(0, \"Quantity can'be negative\"),\r\n  // tag_date: Yup.date(),\r\n  // turn_around_time: Yup.string(),\r\n  // hazmat: Yup.string(),\r\n  // certification: Yup.string(),\r\n  // unit_of_measure: Yup.string(),\r\n  // hot_sale_item: Yup.string(),\r\n  // status: Yup.string(),\r\n});\r\n\r\nexport function ManufactureEditForm({\r\n  manufacture,\r\n  btnRef,\r\n  saveManufacture,\r\n}) {\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={manufacture}\r\n        validationSchema={ManufactureEditSchema}\r\n        onSubmit={(values) => {\r\n          saveManufacture(values);\r\n        }}\r\n      >\r\n        {({ handleSubmit }) => (\r\n          <>\r\n            <Form className=\"form form-label-right\">\r\n              <div className=\"form-group row\">\r\n                <div className=\"col-lg-12\">\r\n                  <Field\r\n                    name=\"name\"\r\n                    component={Input}\r\n                    placeholder=\"Name\"\r\n                    label=\"Manufacturer Name\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <button\r\n                type=\"submit\"\r\n                style={{ display: \"none\" }}\r\n                ref={btnRef}\r\n                onSubmit={() => handleSubmit()}\r\n              ></button>\r\n            </Form>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n","export const defaultSorted = [{ dataField: \"id\", order: \"asc\" }];\r\nexport const sizePerPageList = [\r\n  { text: \"1\", value: 1 },\r\n  { text: \"3\", value: 3 },\r\n  { text: \"5\", value: 5 },\r\n];\r\nexport const initialFilter = {\r\n  filter: {\r\n    value: \"\",\r\n  },\r\n  sortOrder: \"asc\", // asc||desc\r\n  sortField: \"name\",\r\n  pageNumber: 1,\r\n  pageSize: 5,\r\n};\r\n\r\nexport const SPECIFICATIONS_DICTIONARY = [\r\n  { id: 0, name: \"Seats\" },\r\n  { id: 1, name: \"Fuel Type\" },\r\n  { id: 2, name: \"Stock\" },\r\n  { id: 3, name: \"Door count\" },\r\n  { id: 4, name: \"Engine\" },\r\n  { id: 5, name: \"Transmission\" },\r\n  { id: 6, name: \"Drivetrain\" },\r\n  { id: 7, name: \"Combined MPG\" },\r\n  { id: 8, name: \"Warranty\" },\r\n  { id: 9, name: \"Wheels\" },\r\n];\r\n","/* eslint-disable no-unused-vars */\r\nimport React, {\r\n  useEffect,\r\n  useContext,\r\n  createContext,\r\n  useState,\r\n  useCallback,\r\n} from \"react\";\r\nimport { isEqual, isFunction } from \"lodash\";\r\nimport { initialFilter } from \"./SpecificationsUIHelper\";\r\n\r\nconst SpecificationsUIContext = createContext();\r\n\r\nexport function useSpecificationsUIContext() {\r\n  return useContext(SpecificationsUIContext);\r\n}\r\n\r\nexport const SpecificationsUIConsumer = SpecificationsUIContext.Consumer;\r\n\r\nexport function SpecificationsUIProvider({ currentManufactureId, children }) {\r\n  const [manufactureId, setManufactureId] = useState(currentManufactureId);\r\n  const [queryParams, setQueryParamsBase] = useState(initialFilter);\r\n  const [ids, setIds] = useState([]);\r\n  const setQueryParams = useCallback((nextQueryParams) => {\r\n    setQueryParamsBase((prevQueryParams) => {\r\n      if (isFunction(nextQueryParams)) {\r\n        nextQueryParams = nextQueryParams(prevQueryParams);\r\n      }\r\n\r\n      if (isEqual(prevQueryParams, nextQueryParams)) {\r\n        return prevQueryParams;\r\n      }\r\n\r\n      return nextQueryParams;\r\n    });\r\n  }, []);\r\n  const [selectedId, setSelectedId] = useState(null);\r\n  const initSpecification = {\r\n    id: undefined,\r\n    value: \"\",\r\n    specId: 0,\r\n    carId: manufactureId,\r\n  };\r\n  useEffect(() => {\r\n    initSpecification.carId = currentManufactureId;\r\n    initSpecification.manufactureId = currentManufactureId;\r\n    setManufactureId(currentManufactureId);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentManufactureId]);\r\n  const [\r\n    showEditSpecificationDialog,\r\n    setShowEditSpecificationDialog,\r\n  ] = useState(false);\r\n  const openNewSpecificationDialog = () => {\r\n    setSelectedId(undefined);\r\n    setShowEditSpecificationDialog(true);\r\n  };\r\n  const openEditSpecificationDialog = (id) => {\r\n    setSelectedId(id);\r\n    setShowEditSpecificationDialog(true);\r\n  };\r\n  const closeEditSpecificationDialog = () => {\r\n    setSelectedId(undefined);\r\n    setShowEditSpecificationDialog(false);\r\n  };\r\n  const [\r\n    showDeleteSpecificationDialog,\r\n    setShowDeleteSpecificationDialog,\r\n  ] = useState(false);\r\n  const openDeleteSpecificationDialog = (id) => {\r\n    setSelectedId(id);\r\n    setShowDeleteSpecificationDialog(true);\r\n  };\r\n  const closeDeleteSpecificationDialog = () => {\r\n    setSelectedId(undefined);\r\n    setShowDeleteSpecificationDialog(false);\r\n  };\r\n  const [\r\n    showDeleteSpecificationsDialog,\r\n    setShowDeleteSpecificationsDialog,\r\n  ] = useState(false);\r\n  const openDeleteSpecificationsDialog = () => {\r\n    setShowDeleteSpecificationsDialog(true);\r\n  };\r\n  const closeDeleteSpecificationsDialog = () => {\r\n    setShowDeleteSpecificationsDialog(false);\r\n  };\r\n  const [\r\n    showFetchSpecificationsDialog,\r\n    setShowFetchSpecificationsDialog,\r\n  ] = useState(false);\r\n  const openFetchSpecificationsDialog = () => {\r\n    setShowFetchSpecificationsDialog(true);\r\n  };\r\n  const closeFetchSpecificationsDialog = () => {\r\n    setShowFetchSpecificationsDialog(false);\r\n  };\r\n  const value = {\r\n    ids,\r\n    setIds,\r\n    manufactureId,\r\n    setManufactureId,\r\n    queryParams,\r\n    setQueryParams,\r\n    initSpecification,\r\n    selectedId,\r\n    showEditSpecificationDialog,\r\n    openEditSpecificationDialog,\r\n    openNewSpecificationDialog,\r\n    closeEditSpecificationDialog,\r\n    showDeleteSpecificationDialog,\r\n    openDeleteSpecificationDialog,\r\n    closeDeleteSpecificationDialog,\r\n    showDeleteSpecificationsDialog,\r\n    openDeleteSpecificationsDialog,\r\n    closeDeleteSpecificationsDialog,\r\n    showFetchSpecificationsDialog,\r\n    openFetchSpecificationsDialog,\r\n    closeFetchSpecificationsDialog,\r\n  };\r\n\r\n  return (\r\n    <SpecificationsUIContext.Provider value={value}>\r\n      {children}\r\n    </SpecificationsUIContext.Provider>\r\n  );\r\n}\r\n","// Form is based on Formik\r\n// Data validation is based on Yup\r\n// Please, be familiar with article first:\r\n// https://hackernoon.com/react-form-validation-with-formik-and-yup-8b76bda62e10\r\nimport React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Select,\r\n  Input,\r\n} from \"../../../../../../../_metronic/_partials/controls\";\r\nimport { SPECIFICATIONS_DICTIONARY } from \"../SpecificationsUIHelper\";\r\n\r\n// Validation schema\r\nconst SpecificationEditSchema = Yup.object().shape({\r\n  value: Yup.string()\r\n    .min(2, \"Minimum 2 symbols\")\r\n    .max(50, \"Maximum 50 symbols\")\r\n    .required(\"Value is required\"),\r\n  specId: Yup.number().required(\"Specification type is required\"),\r\n});\r\n\r\nexport function SpecificationEditForm({\r\n  saveSpecification,\r\n  specification,\r\n  actionsLoading,\r\n  onHide,\r\n}) {\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={specification}\r\n        validationSchema={SpecificationEditSchema}\r\n        onSubmit={(values) => {\r\n          saveSpecification(values);\r\n        }}\r\n      >\r\n        {({ handleSubmit }) => (\r\n          <>\r\n            <Modal.Body className=\"overlay overlay-block cursor-default\">\r\n              {actionsLoading && (\r\n                <div className=\"overlay-layer bg-transparent\">\r\n                  <div className=\"spinner spinner-lg spinner-success\" />\r\n                </div>\r\n              )}\r\n              <Form className=\"form form-label-right\">\r\n                <div className=\"form-group row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <Select name=\"specId\" label=\"Specification Type\">\r\n                      {SPECIFICATIONS_DICTIONARY.map((spec) => (\r\n                        <option key={spec.id} value={spec.id}>\r\n                          {spec.name}\r\n                        </option>\r\n                      ))}\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <Field\r\n                      name=\"value\"\r\n                      component={Input}\r\n                      placeholder=\"Value\"\r\n                      label=\"Value\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <button\r\n                type=\"button\"\r\n                onClick={onHide}\r\n                className=\"btn btn-light btn-elevate\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <> </>\r\n              <button\r\n                type=\"submit\"\r\n                onClick={() => handleSubmit()}\r\n                className=\"btn btn-primary btn-elevate\"\r\n              >\r\n                Save\r\n              </button>\r\n            </Modal.Footer>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useEffect, useContext, createContext, useState, useCallback } from \"react\";\r\nimport {isEqual, isFunction} from \"lodash\";\r\nimport {initialFilter} from \"./RemarksUIHelper\";\r\n\r\nconst RemarksUIContext = createContext();\r\n\r\nexport function useRemarksUIContext() {\r\n  return useContext(RemarksUIContext);\r\n}\r\n\r\nexport const RemarksUIConsumer = RemarksUIContext.Consumer;\r\n\r\nexport function RemarksUIProvider({ currentManufactureId, children }) {\r\n  const [manufactureId, setManufactureId] = useState(currentManufactureId);\r\n  const [queryParams, setQueryParamsBase] = useState(initialFilter);\r\n  const [ids, setIds] = useState([]);\r\n  const setQueryParams = useCallback(nextQueryParams => {\r\n    setQueryParamsBase(prevQueryParams => {\r\n      if (isFunction(nextQueryParams)) {\r\n        nextQueryParams = nextQueryParams(prevQueryParams);\r\n      }\r\n\r\n      if (isEqual(prevQueryParams, nextQueryParams)) {\r\n        return prevQueryParams;\r\n      }\r\n\r\n      return nextQueryParams;\r\n    });\r\n  }, []);\r\n  const [selectedId, setSelectedId] = useState(null);\r\n  const [showEditRemarkDialog, setShowEditRemarkDialog] = useState(false);\r\n  const initRemark = {\r\n    id: undefined,\r\n    text: \"\",\r\n    type: 0,\r\n    dueDate: \"01/07/2020\",\r\n    carId: manufactureId\r\n  };\r\n  useEffect(()=> {\r\n    initRemark.manufactureId = currentManufactureId;\r\n    initRemark.carId = currentManufactureId;\r\n    setManufactureId(currentManufactureId);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentManufactureId]);\r\n  const openNewRemarkDialog = () => {\r\n    setSelectedId(undefined);\r\n    setShowEditRemarkDialog(true);\r\n  };\r\n  const openEditRemarkDialog = id => {\r\n    setSelectedId(id);\r\n    setShowEditRemarkDialog(true);\r\n  };\r\n  const closeEditRemarkDialog = () => {\r\n    setSelectedId(undefined);\r\n    setShowEditRemarkDialog(false);\r\n  };\r\n  const [showDeleteRemarkDialog, setShowDeleteRemarkDialog] = useState(false);\r\n  const openDeleteRemarkDialog = id => {\r\n    setSelectedId(id);\r\n    setShowDeleteRemarkDialog(true);\r\n  };\r\n  const closeDeleteRemarkDialog = () => {\r\n    setSelectedId(undefined);\r\n    setShowDeleteRemarkDialog(false);\r\n  };\r\n\r\n  const [showDeleteRemarksDialog, setShowDeleteRemarksDialog] = useState(false);\r\n  const openDeleteRemarksDialog = () => {\r\n    setShowDeleteRemarksDialog(true);\r\n  };\r\n  const closeDeleteRemarksDialog = () => {\r\n    setShowDeleteRemarksDialog(false);\r\n  };\r\n\r\n  const [showFetchRemarksDialog, setShowFetchRemarksDialog] = useState(false);\r\n  const openFetchRemarksDialog = () => {\r\n    setShowFetchRemarksDialog(true);\r\n  };\r\n  const closeFetchRemarksDialog = () => {\r\n    setShowFetchRemarksDialog(false);\r\n  };\r\n\r\n  const value = {\r\n    ids,\r\n    setIds,\r\n    manufactureId,\r\n    setManufactureId,\r\n    queryParams,\r\n    setQueryParams,\r\n    initRemark,\r\n    selectedId,\r\n    showEditRemarkDialog,\r\n    openNewRemarkDialog,    \r\n    openEditRemarkDialog,\r\n    closeEditRemarkDialog,\r\n    showDeleteRemarkDialog,\r\n    openDeleteRemarkDialog,\r\n    closeDeleteRemarkDialog,\r\n    showDeleteRemarksDialog,\r\n    openDeleteRemarksDialog,\r\n    closeDeleteRemarksDialog,\r\n    openFetchRemarksDialog,\r\n    closeFetchRemarksDialog,\r\n    showFetchRemarksDialog\r\n  };\r\n  \r\n  return (\r\n    <RemarksUIContext.Provider value={value}>\r\n      {children}\r\n    </RemarksUIContext.Provider>\r\n  );\r\n}\r\n","// Form is based on Formik\r\n// Data validation is based on Yup\r\n// Please, be familiar with article first:\r\n// https://hackernoon.com/react-form-validation-with-formik-and-yup-8b76bda62e10\r\nimport React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Input,\r\n  Select,\r\n  DatePickerField,\r\n} from \"../../../../../../../_metronic/_partials/controls\";\r\n\r\n// Validation schema\r\nconst RemarkEditSchema = Yup.object().shape({\r\n  text: Yup.string()\r\n    .min(2, \"Minimum 2 symbols\")\r\n    .max(50, \"Maximum 50 symbols\")\r\n    .required(\"Text is required\"),\r\n  type: Yup.number().required(\"Type is required\"),\r\n  dueDate: Yup.mixed()\r\n    .nullable(false)\r\n    .required(\"Due date is required\"),\r\n});\r\n\r\nexport function RemarkEditForm({ saveRemark, remark, actionsLoading, onHide }) {\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={remark}\r\n        validationSchema={RemarkEditSchema}\r\n        onSubmit={(values) => saveRemark(values)}\r\n      >\r\n        {({ handleSubmit }) => (\r\n          <>\r\n            <Modal.Body className=\"overlay overlay-block cursor-default\">\r\n              {actionsLoading && (\r\n                <div className=\"overlay-layer bg-transparent\">\r\n                  <div className=\"spinner spinner-lg spinner-success\" />\r\n                </div>\r\n              )}\r\n              <Form className=\"form form-label-right\">\r\n                <div className=\"form-group row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <Field\r\n                      name=\"text\"\r\n                      component={Input}\r\n                      placeholder=\"Text\"\r\n                      label=\"Text\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <DatePickerField name=\"dueDate\" label=\"Due date\" />\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <Select name=\"type\" label=\"Type\">\r\n                      <option value=\"0\">Info</option>\r\n                      <option value=\"1\">Note</option>\r\n                      <option value=\"2\">Reminder</option>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <button\r\n                type=\"button\"\r\n                onClick={onHide}\r\n                className=\"btn btn-light btn-elevate\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <> </>\r\n              <button\r\n                type=\"submit\"\r\n                onClick={() => handleSubmit()}\r\n                className=\"btn btn-primary btn-elevate\"\r\n              >\r\n                Save\r\n              </button>\r\n            </Modal.Footer>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable no-script-url,jsx-a11y/anchor-is-valid,jsx-a11y/role-supports-aria-props */\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../../_redux/manufactures/manufacturesActions\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardHeaderToolbar,\r\n} from \"../../../../../../_metronic/_partials/controls\";\r\nimport { ManufactureEditForm } from \"./ManufactureEditForm\";\r\nimport { Specifications } from \"../manufacture-specifications/Specifications\";\r\nimport { SpecificationsUIProvider } from \"../manufacture-specifications/SpecificationsUIContext\";\r\nimport { useSubheader } from \"../../../../../../_metronic/layout\";\r\nimport { ModalProgressBar } from \"../../../../../../_metronic/_partials/controls\";\r\nimport { RemarksUIProvider } from \"../manufacture-remarks/RemarksUIContext\";\r\nimport { Remarks } from \"../manufacture-remarks/Remarks\";\r\nimport { ADMIN_ROUTE } from \"../../../../../pages/helper/api\";\r\n\r\nconst initManufacture = {\r\n  id: undefined,\r\n  name: \"\",\r\n  \r\n};\r\n\r\nexport function ManufactureEdit({\r\n  history,\r\n  match: {\r\n    params: { id },\r\n  },\r\n}) {\r\n  // Subheader\r\n  const suhbeader = useSubheader();\r\n\r\n  // Tabs\r\n  const [title, setTitle] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  // const layoutDispatch = useContext(LayoutContext.Dispatch);\r\n  const { actionsLoading, manufactureForEdit } = useSelector(\r\n    (state) => ({\r\n      actionsLoading: state.manufactures.actionsLoading,\r\n      manufactureForEdit: state.manufactures.manufactureForEdit,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(actions.fetchManufacture(id));\r\n  }, [id, dispatch]);\r\n\r\n  useEffect(() => {\r\n    let _title = id ? \"\" : \"New Manufacture\";\r\n    if (manufactureForEdit && id) {\r\n      _title = `Edit manufacture - ${manufactureForEdit.name}`;\r\n    }\r\n\r\n    setTitle(_title);\r\n    suhbeader.setTitle(_title);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [manufactureForEdit, id]);\r\n\r\n  const saveManufacture = (values) => {\r\n      console.log('values', values);\r\n    \r\n    if (!id) {\r\n      dispatch(actions.createManufacture(values)).then(() => backToManufacturesList());\r\n    } else {\r\n\r\n      dispatch(actions.updateManufacture(values)).then(() => backToManufacturesList());\r\n    }\r\n  };\r\n\r\n  const btnRef = useRef();  \r\n  const saveManufactureClick = () => {\r\n    if (btnRef && btnRef.current) {\r\n      btnRef.current.click();\r\n    }\r\n  };\r\n\r\n  const backToManufacturesList = () => {\r\n    history.push(`/${ADMIN_ROUTE}/manufactures`);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      {actionsLoading && <ModalProgressBar />}\r\n      <CardHeader title={title}>\r\n        <CardHeaderToolbar>\r\n          <button\r\n            type=\"button\"\r\n            onClick={backToManufacturesList}\r\n            className=\"btn btn-light\"\r\n          >\r\n            <i className=\"fa fa-arrow-left\"></i>\r\n            Back\r\n          </button>\r\n          {`  `}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-info ml-2\"\r\n            onClick={saveManufactureClick}\r\n          >\r\n            Save\r\n          </button>\r\n        </CardHeaderToolbar>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <div className=\"mt-5\">\r\n            <ManufactureEditForm\r\n              actionsLoading={actionsLoading}\r\n              manufacture={manufactureForEdit || initManufacture}\r\n              btnRef={btnRef}\r\n              saveManufacture={saveManufacture}\r\n            />\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { Suspense } from \"react\";\r\nimport { Redirect, Switch } from \"react-router-dom\";\r\nimport { ManufacturesPage } from \"./ManufacturesPage\";\r\nimport { ManufactureEdit } from \"./manufacture-edit/ManufactureEdit\";\r\nimport { LayoutSplashScreen, ContentRoute } from \"../../../../../_metronic/layout\";\r\nimport { ADMIN_ROUTE } from '../../../../../app/pages/helper/api'\r\n\r\nexport default function ManufacturesPages() {\r\n  return (\r\n    <Suspense fallback={<LayoutSplashScreen />}>\r\n      <Switch>\r\n        <ContentRoute path={\"/\"+ADMIN_ROUTE+\"/manufactures/new\"} component={ManufactureEdit} />\r\n        <ContentRoute\r\n          path={\"/\"+ADMIN_ROUTE+\"/manufactures/:id/edit\"}\r\n          component={ManufactureEdit}\r\n        />\r\n        <ContentRoute path={\"/\"+ADMIN_ROUTE+'/manufactures'} component={ManufacturesPage} />\r\n      </Switch>\r\n    </Suspense>\r\n  );\r\n}\r\n"],"sourceRoot":""}